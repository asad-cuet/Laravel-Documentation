**One-to-One Polymorphic Relationship: User Profile Pictures**

**Description:**
- In this relationship, each user can have one associated profile picture, and each profile picture can belong to one user.
- The relationship is polymorphic, meaning the profile picture can be associated with various types of users, not just one.

**Tables and Columns:**
1. **Users Table:**
   - `id`: Primary key for users.
   - Other user-related columns like `name`, `email`, etc.

2. **Profile Pictures Table:**
   - `id`: Primary key for profile pictures.
   - `url`: URL or path to the profile picture.
   - `imageable_id`: Foreign key referencing the `id` column in the related model (e.g., `users` table).
   - `imageable_type`: String column storing the class name of the related model (`App\Models\User`), indicating the type of the related model.

**Laravel Eloquent Setup:**
- Define a one-to-one polymorphic relationship using the `morphOne` method in the `User` model to associate with profile pictures.
- Use the `morphTo` method in the `ProfilePicture` model to indicate the parent model it can belong to.

**Example SQL Schema (users table):**
```sql
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

**Example SQL Schema (profile_pictures table):**
```sql
CREATE TABLE profile_pictures (
    id INT AUTO_INCREMENT PRIMARY KEY,
    url VARCHAR(255),
    imageable_id INT,
    imageable_type VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

**Laravel Eloquent Relationships:**
- In the `User` model:
  ```php
  class User extends Model
  {
      public function profilePicture()
      {
          return $this->morphOne('App\Models\ProfilePicture', 'imageable');
      }
  }
  ```
- In the `ProfilePicture` model:
  ```php
  class ProfilePicture extends Model
  {
      public function imageable()
      {
          return $this->morphTo();
      }
  }
  ```

This setup allows for a flexible association between users and their profile pictures through a one-to-one polymorphic relationship, 
providing versatility and maintainability in your Laravel application.